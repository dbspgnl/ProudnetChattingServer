




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;

namespace C2S
{
	internal class Proxy:Nettention.Proud.RmiProxy
	{
public bool Chat(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string str)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.Chat;
		__msg.Write(__msgid);
		ChattingCommon.Marshaler.Write(__msg, str);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_Chat, Common.Chat);
}

public bool Chat(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, string str)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.Chat;
__msg.Write(__msgid);
ChattingCommon.Marshaler.Write(__msg, str);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_Chat, Common.Chat);
}
public bool Login(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String UserName)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.Login;
		__msg.Write(__msgid);
		ChattingCommon.Marshaler.Write(__msg, UserName);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_Login, Common.Login);
}

public bool Login(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, String UserName)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.Login;
__msg.Write(__msgid);
ChattingCommon.Marshaler.Write(__msg, UserName);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_Login, Common.Login);
}
public bool EnterRoom(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int RoomNumber)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.EnterRoom;
		__msg.Write(__msgid);
		ChattingCommon.Marshaler.Write(__msg, RoomNumber);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_EnterRoom, Common.EnterRoom);
}

public bool EnterRoom(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int RoomNumber)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.EnterRoom;
__msg.Write(__msgid);
ChattingCommon.Marshaler.Write(__msg, RoomNumber);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_EnterRoom, Common.EnterRoom);
}
public bool LeaveRoom(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.LeaveRoom;
		__msg.Write(__msgid);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_LeaveRoom, Common.LeaveRoom);
}

public bool LeaveRoom(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.LeaveRoom;
__msg.Write(__msgid);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_LeaveRoom, Common.LeaveRoom);
}
	
		#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_Chat="Chat";
public const string RmiName_Login="Login";
public const string RmiName_EnterRoom="EnterRoom";
public const string RmiName_LeaveRoom="LeaveRoom";
       
public const string RmiName_First = RmiName_Chat;
		#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_Chat="";
public const string RmiName_Login="";
public const string RmiName_EnterRoom="";
public const string RmiName_LeaveRoom="";
       
public const string RmiName_First = "";
		#endif

		public override Nettention.Proud.RmiID[] GetRmiIDList() { return Common.RmiIDList; } 
	}
}

